{
  "name": "slate-irc",
  "version": "0.5.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/slate/slate-irc"
  },
  "description": "General purpose IRC client",
  "keywords": [
    "irc",
    "client",
    "chat"
  ],
  "dependencies": {
    "irc-replies": "~2.0.0",
    "slate-irc-parser": "0.0.2",
    "debug": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "license": "MIT",
  "readme": "# slate-irc\n\n  General purpose IRC client with:\n\n   - plugin system\n   - simple api\n   - arbitrary input stream\n   - __DEBUG__ support for easy debugging\n\n## Installation\n\n```\n$ npm install slate-irc\n```\n\n## Example\n\n```js\n\nvar irc = require('slate-irc');\nvar net = require('net');\n\nvar stream = net.connect({\n  port: 6667,\n  host: 'irc.freenode.org'\n});\n\nvar client = irc(stream);\n\nclient.pass('pass');\nclient.nick('tobi');\nclient.user('tobi', 'Tobi Ferret');\n\nclient.join('#express');\nclient.names('#express', function(err, names){\n  console.log(names);\n});\n```\n\n## API\n\n## client\n\nGiven a stream from `net` or `tls` or another network source, construct an IRC client.\n\n```js\nvar client = irc(stream);\n```\n\n### .pass(pass)\n\nUsed at the beginning of connection to specify a 'connection password' for servers requiring a auth.\n\n### .nick(nick)\n\nSpecify an `string` irc nick for the user.\n\n### .user(username, realname)\n\nUsed at the beginning of connection to specify the username and realname of a new user.\n\n### .invite(name, channel)\n\nSend an invite to `name`, for a `channel`.\n\n### .send(target, msg)\n\nSend a `msg` to the `target` user or channel.\n\n### .notice(target, msg)\n\nSend a NOTICE `msg` to the `target` user or channel.\n\n### .join(room)\n\nSend a `JOIN` command for the user to join `room`.\n\n### .part(channel, msg)\n\nSend a `PART` command for the user to part `channel` with optional `msg`.\n\n### .names(room, callback)\n\nList names of users in the room `room`, calling `callback` with `(error, names)`.\n\n### .away(message)\n\nSet the user's away message to `message`.\n\n### .topic(topic)\n\nSet the channel topic to `topic`.\n\n### .kick(channels, nicks, msg)\n\nKick nick(s) from channel(s) with optional `msg`.\n\n### .oper(name, password)\n\nUsed to obtain operator privileges.  The combination of `name` and `password` are required to gain Operator privileges.  Upon success, a `'mode'` event will be emitted.\n\n### .mode(target, flags, params)\n\nUsed to set a user's mode or channel's mode for a user.\n\n- `.mode('cmilhench', '-o');` \n\t- // cmilhench 'deopping' himself.\n- `.mode('#channel', '+o', 'name');`\n\t- // give 'chanop' privileges to name on channel #channel.\n\n### .quit(msg)\n\nDisconnect from the server with optional `msg`.\n\n### .whois(target, mask, callback)\n\nUsed to query information about particular user.\n\n## Events\n\n  - `data` (msg) parsed IRC message\n  - `message` (event) on __PRIVMSG__\n  - `notice` (event) on __NOTICE__\n  - `names` (event) on __RPL_NAMREPLY__\n  - `topic` (event) on __TOPIC__\n  - `away` (event) on __RPL_AWAY__\n  - `quit` (event) on __QUIT__\n  - `join` (event) on __JOIN__\n  - `part` (event) on __PART__\n  - `kick` (event) on __KICK__\n  - `mode` (event) on __MODE__\n  - `motd` (event) on __RPL_ENDOFMOTD__\n  - `nick` (event) on __NICK__\n  - `welcome` (nick) on __RPL_WELCOME__\n  - `whois` (event) on __RPL_ENDOFWHOIS__\n\n## Writing Plugins\n\n  Plugins are simply functions that accept the IRC client as an argument. With this you can define methods, listen on events and interact with the\n  client. For example here's a logger plugin that outputs to stdout:\n\n```js\nfunction logger() {\n  return function(irc){\n    irc.stream.pipe(process.stdout);\n  }\n}\n```\n\n  Then `.use()` it like so:\n\n```js\nvar client = irc(stream);\nclient.use(logger());\n```\n\n  Returning a function like `logger()` instead of `logger` is optional,\n  however it's useful to use a closure when passing options, and to keep\n  the interface consistent with plugins that _do_ accept options, for example:\n\n```js\nfunction logger(stream) {\n  return function(irc){\n    irc.stream.pipe(stream);\n  }\n}\n\nclient.use(logger(process.stdout));\n```\n\n  Here's a slightly more complex example of a __PONG__ plugin responding to __PING__ messages:\n\n```js\nfunction pong(){\n  return function(irc){\n    irc.on('data', function(msg){\n      if ('PING' != msg.command) return;\n      irc.write('PONG :' + msg.trailing);\n    });\n  }\n}\n```\n\n## Debugging\n\n  Enable debug output:\n\n```\n$ DEBUG=slate-irc node script.js\n  slate-irc message NOTICE :asimov.freenode.net NOTICE * :*** Looking up your hostname... +0ms\n  slate-irc message NOTICE :asimov.freenode.net NOTICE * :*** Checking Ident +119ms\n  slate-irc message NOTICE :asimov.freenode.net NOTICE * :*** Couldn't look up your hostname +1ms\n  ...\n```\n\n  Enable debug output for a specific plugin:\n\n```\n$ DEBUG=slate-irc:names node test.js\n  slate-irc:names add #luna-lang [\"tjholowaychuk\",\"ramitos\",\"zehl\",\"yawnt\",\"juliangruber\"] +0ms\n  slate-irc:names emit \"names\" for #luna-lang +3ms\n```\n\n  Enable output of \"raw\" slate-irc-parser level debug info:\n\n```\n$ DEBUG=slate-irc-parser node test.js\n` slate-irc-parser line `:rothfuss.freenode.net NOTICE * :*** Looking up your hostname...\n  slate-irc-parser message {\"prefix\":\"rothfuss.freenode.net\",\"command\":\"NOTICE\",\"params\":\"*\",\"trailing\":\"*** Looking up your hostname...\",\"string\":\":rothfuss.freenode.net NOTICE * :*** Looking up your hostname...\"} +2ms\n` +450msirc-parser line `:rothfuss.freenode.net NOTICE * :*** Checking Ident\n  slate-irc-parser message {\"prefix\":\"rothfuss.freenode.net\",\"command\":\"NOTICE\",\"params\":\"*\",\"trailing\":\"*** Checking Ident\",\"string\":\":rothfuss.freenode.net NOTICE * :*** Checking Ident\"} +0ms\n```\n\n## Todo\n\n  - examples\n  - tcp connection with reconnection (separate lib) (re-auth on connect)\n\n# License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/slate/slate-irc/issues"
  },
  "homepage": "https://github.com/slate/slate-irc",
  "_id": "slate-irc@0.5.0",
  "_shasum": "7f275981313114411ac3cce36f823b8a9692181b",
  "_from": "slate-irc@0.5.0",
  "_resolved": "https://registry.npmjs.org/slate-irc/-/slate-irc-0.5.0.tgz"
}
